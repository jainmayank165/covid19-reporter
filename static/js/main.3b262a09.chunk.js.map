{"version":3,"sources":["InfoBox.js","util.js","Maps.js","Table.js","Graph.js","App.js","reportWebVitals.js","index.js"],"names":["infobox","title","cases","active","isRed","total","props","Card","onClick","style","color","className","CardContent","Typography","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","backgroundImage","flag","ChangeMap","zoom","useMap","setView","Maps","countries","MapContainer","TileLayer","attribution","url","Table","options","legend","display","labels","fontColor","elements","point","maintainAspectRatio","tooltips","mode","intersect","callback","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","ticks","beginAtZero","yAxes","gridLines","index","values","Graph","useState","setData","useEffect","fetch","then","Response","json","console","log","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","borderColor","backgroundColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","setMapCenter","zoomMap","setZoomMap","mapCountries","setMapCountries","setCasesType","response","name","iso2","getData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","InfoBox","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b262a09.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,CardContent,Typography} from '@material-ui/core';\r\nimport './infoBox.css';\r\nfunction infobox({title,cases,active,isRed,total,...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} style={{color: \"#6c757d\" }} className={`infoBox ${active &&\"infoBox--selected\"} ${isRed&&\"infoBox--red\"}`}>\r\n           <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">{total} Total</Typography>\r\n           </CardContent>\r\n       </Card>\r\n    )\r\n}\r\n\r\nexport default infobox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {  Circle,Popup } from 'react-leaflet';\r\n// --------------------------------------------------------------------------------\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 600,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n     \r\n      multiplier: 800,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n     multiplier: 1000,\r\n    },\r\n  };\r\n  //--------------------------------------------------------------------------------------\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data];\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases>b.cases)\r\n            return -1;\r\n        else return 1;      \r\n    })\r\n    return sortedData;\r\n}\r\n// ----------------------------------------------------------------------------------------\r\nexport const prettyPrintStat=(stat)=>\r\nstat?`+${numeral(stat).format(\"0.0a\")}`:\"0.0\";\r\n//-----------------------------------------------------------------------------------------\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport { MapContainer ,TileLayer,useMap} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from './util'\r\nfunction ChangeMap({center,zoom}){\r\n    const map=useMap();\r\n    map.setView(center,zoom);\r\n    return null ;\r\n}\r\nfunction Maps({countries,casesType,center,zoom}) {\r\n    return (\r\n        \r\n     <div className=\"map\">   \r\n        <MapContainer >\r\n            <ChangeMap center={center} zoom={zoom}/>\r\n            <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {showDataOnMap(countries,casesType)}\r\n            \r\n        </MapContainer>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Maps;\r\n\r\n        \r\n\r\n  \r\n","import React from 'react'\r\nimport './table.css';\r\nimport numeral from 'numeral';\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n            <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nconst options={\r\nlegend:{\r\n    display:false,\r\n    labels: {\r\n        fontColor: 'orange'\r\n       }\r\n},\r\n    elements:{\r\n        point:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callback:{\r\n            \r\n            label:function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type:\"time\",\r\n                time:{\r\n                    format:\"MM/DD/YY\",\r\n                    tooltipFormat:\"ll\",\r\n                    \r\n                },\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: '#e0e1dd'\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n            ticks:{\r\n                fontColor: '#e0e1dd',\r\n            callback:function(value,index,values){\r\n                return numeral(value).format(\"0a\");\r\n            }\r\n            }\r\n        }\r\n        ]\r\n            \r\n    }\r\n}\r\nfunction Graph({casesType=\"cases\",...props}) {\r\n    const [data,setData]=useState({});\r\n    useEffect(()=>\r\n    {   const fetchData=async()=>{\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((Response)=>Response.json())\r\n        .then((data)=>{\r\n            console.log(data);\r\n            const chartData=buildChartData(data,casesType);\r\n            setData(chartData);\r\n        })\r\n      }\r\n      fetchData();  \r\n    },[casesType]);\r\n    const buildChartData=(data,casesType)=>{\r\n        const chartData=[];\r\n        let lastDataPoint;\r\n        for(let date in data.cases){\r\n          if(lastDataPoint)\r\n          {\r\n            const newDataPoint={\r\n              x:date,\r\n              y:data[casesType][date]-lastDataPoint\r\n            }\r\n           chartData.push(newDataPoint);\r\n          }\r\n          lastDataPoint=data[casesType][date];\r\n        };\r\n        return chartData;\r\n      }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length>0&&(\r\n                 <Line options={options}\r\n                 data={{\r\n                     datasets:[{\r\n                         data:data,\r\n                         borderColor:\"#e0e1dd\",\r\n                         backgroundColor:\"#4ecdc4\"\r\n                     }]\r\n                 }}/>\r\n            )}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph\r\n","import React,{useState,useEffect} from \"react\"\nimport {MenuItem,Select,FormControl,Card,CardContent} from \"@material-ui/core\"\nimport './App.css';\nimport InfoBox from './InfoBox.js';\nimport Maps from './Maps.js'\nimport Table from './Table.js'\nimport {sortData,prettyPrintStat} from './util'\nimport Graph from './Graph.js'\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() { \n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState('Worldwide');\n  const [countryInfo,setCountryInfo]=useState({});\n  const [tableData,setTableData]=useState([]);\n  const [center,setMapCenter]=useState({lat:20,lng: 77});\n  const [zoomMap,setZoomMap]=useState(2);\n  const [mapCountries,setMapCountries]=useState([]);\n  const [casesType,setCasesType]=useState(\"cases\");\n\n  \n   {/*--------------------------------------------------------------*/}\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response=>response.json())\n    .then((data)=>\n    {\n      setCountryInfo(data);\n    })\n  },[])\n   {/*--------------------------------------------------------------*/}\n  useEffect(() => {\n    const getData=async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>\n      {\n        const countries=data.map((country)=>(\n          { \n            name:country.country,\n            value:country.countryInfo.iso2\n          }));\n          const sortedData=sortData(data);\n         setTableData(sortedData);\n         setMapCountries(data);\n          setCountries(countries);     \n      })\n    }\n    getData();\n  }, []);\n  {/*--------------------------------------------------------------*/}\n  const onCountryChange=async(e)=>{\n    const countryCode=e.target.value;\n    const url=countryCode==='Worldwide'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n \n    await fetch(url)\n    .then(response=>response.json())\n    .then(data=>{\n      setCountry(countryCode);\n      setCountryInfo(data);\n      (countryCode===\"Worldwide\")?setMapCenter([34,-40]):setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n      (countryCode===\"Worldwide\")?setZoomMap(2):setZoomMap(4);\n      \n    })\n    \n  }\n   {/*--------------------------------------------------------------*/}\n  \n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>Covid-19 Report</h1>\n          <FormControl className=\"app_Dropdown\">\n          <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n          <MenuItem  style={{color:'#e0e1dd',backgroundColor:\"#0b132b\"}}value=\"Worldwide\">Worldwide</MenuItem>\n            {countries.map((country)=>(\n              <MenuItem style={{color:'#e0e1dd',backgroundColor:\"#0b132b\"}} value={country.value} >{country.name}</MenuItem>\n            ))}\n\n          </Select>\n          </FormControl>\n        </div>\n        {/*--------------------------------------------------------------*/}\n        <div className=\"app_stats\">\n          <InfoBox  isRed\n                    className=\"infoBox_app\"\n                    active={casesType===\"cases\"}\n                    onClick={(e)=>setCasesType(\"cases\")} \n                    title=\"Carona cases\" \n                    cases={prettyPrintStat(countryInfo.todayCases)} \n                    total={prettyPrintStat(countryInfo.cases)}/>         \n          <InfoBox \n                    active={casesType===\"recovered\"}\n                    onClick={(e)=>setCasesType(\"recovered\")} \n                    title=\"Recoveries\"\n                    cases={prettyPrintStat(countryInfo.todayRecovered)} \n                    total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox  isRed\n                    active={casesType===\"deaths\"}\n                    onClick={(e)=>setCasesType(\"deaths\")} \n                    title=\"Deaths\"\n                    cases={prettyPrintStat(countryInfo.todayDeaths)} \n                    total={prettyPrintStat(countryInfo.deaths)}/> \n        \n        </div>\n            \n        {/*--------------------------------------------------------------*/}\n       \n        <div>\n          <Maps countries={mapCountries} casesType={casesType} center={center} zoom={zoomMap}/>\n        </div>\n      </div> \n      {/*------------------------------------------------------------------------------*/}\n      <Card className=\"app_right\">\n        <CardContent>\n              <h2 style={{color:'#e0e1dd'}}><center>LIVE CASES</center></h2>\n              <Table countries={tableData}/>\n            <h2 className=\"app_gt\" style={{color:'#e0e1dd'}}><center>Worldwide {casesType}</center></h2>\n              <Graph className=\"app_graph\"casesType={casesType} />\n  \n        </CardContent>\n      </Card>\n\n      \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}